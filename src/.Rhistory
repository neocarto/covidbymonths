# https://www.data.gouv.fr/fr/datasets/donnees-hospitalieres-relatives-a-lepidemie-de-covid-19/
library(sf)
library(cartogram)
library(cartography)
dept <- st_read("data/DEPT.geojson") %>% st_transform(2154)
sources <- "Cartographie : Nicolas Lambert, 2020.\nSource : Insee 2020 & Santé publique France, 2020.\n[https://www.data.gouv.fr/fr/datasets/donnees-hospitalieres-relatives-a-lepidemie-de-covid-19]\nMéthode : potentiel calculé selon la méthode de stewart à partir des données départementales (fonction exponentielle, distance euclidienne, span = 40km, beta = 2) "
dept <- st_read("data/DEPT.geojson") %>% st_transform(2154)
library(sf)
library(cartography)
# Metadata
sources <- "Cartographie : Nicolas Lambert, 2020.\nSource : Insee 2020 & Santé publique France, 2020.\n[https://www.data.gouv.fr/fr/datasets/donnees-hospitalieres-relatives-a-lepidemie-de-covid-19]\nMéthode : potentiel calculé selon la méthode de stewart à partir des données départementales (fonction exponentielle, distance euclidienne, span = 40km, beta = 2) "
# import
dept <- st_read("data/DEPT.geojson") %>% st_transform(2154)
fr <- st_union(dept)
boxes <- st_read("data/boxes.geojson") %>% st_transform(2154)
remotes <- st_read("data/remotes.geojson") %>% st_transform(2154)
ue <- st_read("data/ue.geojson") %>% st_transform(2154)
getwd()
# https://www.data.gouv.fr/fr/datasets/donnees-hospitalieres-relatives-a-lepidemie-de-covid-19/
library(sf)
library(cartogram)
library(cartography)
# Fond de carte
dept <- st_read("data/DEPT.geojson") %>% st_transform(2154)
fr <- st_union(dept)
boxes <- st_read("data/boxes.geojson") %>% st_transform(2154)
remotes <- st_read("data/remotes.geojson") %>% st_transform(2154)
ue <- st_read("data/ue.geojson") %>% st_transform(2154)
# donnees-hospitalieres-covid19
url <- "https://www.data.gouv.fr/fr/datasets/r/63352e38-d353-4b54-bfd1-f1b3ee1cabd7"
url2 <- "https://www.data.gouv.fr/fr/datasets/r/3f0f1885-25f4-4102-bbab-edec5a58e34a"
data1 <- read.csv(url, sep = ";")
data1 <-  data1[data1$sexe == 0,]
metadata1 <- read.csv(url2, sep = ";")
nb <- nrow(data1)
for(i in 1: nb){
x <- data1$jour[i]
if(substr(x,7,10) == "2020"){
data1$jour[i] <- paste(substr(x, 7,10), substr(x, 4,5), substr(x,1,2), sep = "-")
}
}
View(data1)
View(data1)
data1 <- data1[gsub("-", "", data1$jour)  >= 20200901,]
View(data1)
# devtools::install_github("neocarto/cartogram")
# devtools::install_github("neocarto/cartogram", force = TRUE)
source("src/src1.R")
start <- Sys.time()
buildmaps(csv = data1, var = "dc", title = "Personnes décédées à l'hôpital (cumul)", col = "#e186eb", l = 80000000,  fact = 10)
buildmaps(csv = data2, var = "incid_dc", title = "Personnes décédées à l'hôpital ce jour", col = "#e186eb", l = 40000000, fact = 1)
buildmaps(csv = data1, var = "rea", title = "Personnes en réanimation ou en soins intensifs", col = "#FFCC00", l = 40000000, fact = 1)
buildmaps(csv = data2, var = "incid_rea", title = "Personnes admises ce jour en réanimation ou en soins intensifs", col = "#FFCC00", l = 40000000, fact = 1)
buildmaps(csv = data1, var = "rad", title = "Personnes hospitalisées et retournées à domicile (cumul)", col = "#a5e3f0", l = 100000000, fact = 25)
buildmaps(csv = data2, var = "incid_rad", title = "Personnes hospitalisées et retournées à domicile ce jour", col = "#a5e3f0", l = 40000000, fact = 1)
buildmaps(csv = data1, var = "hosp", title = "Personnes hospitalisées", col = "#bbf294", l = 80000000, fact = 10)
buildmaps(csv = data2, var = "incid_hosp", title = "Personnes nouvellement hospitalisées", col = "#bbf294", l = 40000000, fact = 1)
end <- Sys.time()
time1 <- as.numeric(end - start)
if (time1 > 1 ){
buildmp4("dc")
buildmp4("incid_dc")
buildmp4("rad")
buildmp4("incid_rea")
buildmp4("rea")
buildmp4("incid_hosp")
buildmp4("hosp")
buildmp4("incid_rad")
}
source("src/src2.R")
start <- Sys.time()
buildmap2()
end <- Sys.time()
time2 <- as.numeric(end - start)
if (time2 > 1){
buildmp4("dc_ehpad")
}
# ---
source("src/src5.R")
start <- Sys.time()
buildmaps2(csv = data1, var = "dc", title = "Personnes décédées à l'hôpital (depuis le 1er sept.)", col = "#e186eb", l = 80000000,  fact = 10)
buildmaps2(csv = data2, var = "incid_dc", title = "Personnes décédées à l'hôpital ce jour", col = "#e186eb", l = 40000000, fact = 1)
buildmaps2(csv = data1, var = "rea", title = "Personnes en réanimation (depuis le 1er sept.)", col = "#FFCC00", l = 40000000, fact = 1)
buildmaps2(csv = data2, var = "incid_rea", title = "Personnes admises ce jour en réanimation ou en soins intensifs", col = "#FFCC00", l = 40000000, fact = 1)
buildmaps2(csv = data1, var = "rad", title = "Personnes hospitalisées et retournées à domicile (depuis le 1er sept.)", col = "#a5e3f0", l = 100000000, fact = 25)
buildmaps2(csv = data2, var = "incid_rad", title = "Personnes hospitalisées et retournées à domicile ce jour", col = "#a5e3f0", l = 40000000, fact = 1)
buildmaps2(csv = data1, var = "hosp", title = "Personnes hospitalisées", col = "#bbf294", l = 80000000, fact = 10)
buildmaps2(csv = data2, var = "incid_hosp", title = "Personnes nouvellement hospitalisées", col = "#bbf294", l = 40000000, fact = 1)
end <- Sys.time()
time3 <- as.numeric(end - start)
if (time3 > 1 ){
buildmp42("dc")
buildmp42("incid_dc")
buildmp42("rad")
buildmp42("incid_rea")
buildmp42("rea")
buildmp42("incid_hosp")
buildmp42("hosp")
buildmp42("incid_rad")
}
# TEST
if (time1 > 1){ print("SUCCESFULL UPDATE (1/2)") } else { print("FAIL (1/2)")}
if (time2 > 1){ print("SUCCESFULL UPDATE (2/2)") } else { print("FAIL (2/2)")}
if (time3 > 1){ print("SUCCESFULL UPDATE (3/3)") } else { print("FAIL (3/3)")}
# Smooth
source("src/src3.R")
source("src/src4.R")
library(sf)
library(cartography)
library(cartogram)
# Metadata
sources <- "Cartographie : Nicolas Lambert, 2020.\nSource : Insee 2020 & Santé publique France, 2020.\n[https://www.data.gouv.fr/fr/datasets/donnees-hospitalieres-relatives-a-lepidemie-de-covid-19]"
# import
dept <- st_read("data/DEPT.geojson") %>% st_transform(2154)
fr <- st_union(dept)
boxes <- st_read("data/boxes.geojson") %>% st_transform(2154)
remotes <- st_read("data/remotes.geojson") %>% st_transform(2154)
ue <- st_read("data/ue.geojson") %>% st_transform(2154)
# data
pop <- read.csv("data/pop2020.csv", sep = ";", stringsAsFactors = FALSE)
url <- "https://www.data.gouv.fr/fr/datasets/r/6fadff46-9efd-4c53-942a-54aca783c30c"
data <- read.csv(url, sep = ";")
data$month <- substr(data$jour, 1, 7)
dd <- aggregate(data$incid_dc, by=list(Category=data$month), FUN=sum)
colnames(dd) <- c("date","dc")
mois <- c("janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre")
nbmois <- c(31,28,31,30,31,30,31,31,30,31,30,31)
daymin <- aggregate(data$jour, by=list(id=data$month), FUN=min)
daymax <- aggregate(data$jour, by=list(id=data$month), FUN=max)
daymin$x <- as.numeric(substr(daymin$x, 9, 10))
daymax$x <- as.numeric(substr(daymax$x, 9, 10))
data <- aggregate(data$incid_hosp, by=list(id1 = data$dep, id2=data$month), FUN=sum)
colnames(data) <- c("dep","date","hosp")
data <- merge(x = data, y = pop, by.x = "dep", by.y = "id")
data <- data[,c("date","dep","hosp","pop2020")]
data$hospperinh <- data$hosp/data$pop2020*100000
csv <- data
dates <- as.character(unique(data$date))
dates <- dates[order(dates, na.last = NA)]
# -----------------------------------------------------------------------------------
# 1 - dots hosp
# -----------------------------------------------------------------------------------
fact <- 10
nb <- length(dates)
for (i in 1:nb) {
date = dates[i]
file <- paste0("maps/bymonth/hosp/hosp_",date,".png")
if (!file.exists(file)){
data <- csv[csv$date == date,]
min <- daymin$x[daymin$id == date]
max <- daymax$x[daymax$id == date]
if (min > 1){lbl <- paste0("(du ",min," au ",max,')')}
if (max <= nbmois[as.numeric(substring(date,6,7))]){lbl <- paste0("(du ",min," au ",max,')')}
if (min == 1 & max == nbmois[as.numeric(substring(date,6,7))]){lbl <- ""}
datelabel <- paste0(mois[as.numeric(substr(date, 6,7))]," ",substr(date, 1,4))
total <- sum(data$dc, na.rm = TRUE)
# top15 <- data[order(data$dc, decreasing = TRUE),]
# top15 <- top15[c(1:15),]
# top15 <- merge(dept, top15, by.x = "id", by.y = "dep")
top50 <- data[data$hosp >= 500,]
top50 <- merge(dept, top50, by.x = "id", by.y = "dep")
data[,"hosp"] <- round(data[,var]/fact,0)
data_unique <- data[data$dc == 1,]
data_multi <-  data[data$dc  > 1,]
if (nrow(data_multi) > 0){
for (i in 1:dim(data_multi)[1]){
nb <- as.numeric(data_multi[i,"hosp"])[1]
tmp <- data_multi[i,]
tmp[,"hosp"] <- 1
for (j in 1:nb){ data_unique <- rbind(data_unique,tmp)}
}
}
x <- merge(dept, data_unique, by.x = "id", by.y = "dep")
if (nrow(x) != 0){
d <- cartogram_dorling(st_jitter(x), "hosp", l = 25000000, itermax = 1000)
}
# Map
png(file, width = 1500, height = 1400, res = 150)
par(mar = c(0,0,0,0), bg="#A8D4EF")
plot(st_geometry(fr), col = "#C8D8E5", border = NA)
plot(st_geometry(ue), col = "#E0D4C6", border = NA, add = T)
plot(st_geometry(remotes), col = "#E0D4C6", border = NA, add = T)
plot(st_geometry(fr) + c(1500, -1500), col ="#00000010", border = NA, add = T)
plot(st_geometry(fr) + c(3000, -3000), col ="#00000010", border = NA, add = T)
plot(st_geometry(fr) + c(4500, -4500), col ="#00000010", border = NA, add = T)
plot(st_geometry(fr) + c(6000, -6000), col ="#00000010", border = NA, add = T)
plot(st_geometry(fr) + c(7500, -7500), col ="#00000010", border = NA, add = T)
#plot(st_geometry(fr), col = "#4D4E54", border = NA, add = T)
plot(st_geometry(fr), col = "#e0d580", border = "#C8D8E5", lwd = 0.4, add = T)
plot(st_geometry(boxes), col = NA, border ="white", lty = 2, add= T)
if (nrow(x) != 0){
plot(st_geometry(d), col="#c93838", border = "#e0d580", lwd = 1, add=T)
}
rect(60000, 7090000, 1300000, 7180000, border = NA, col = "#FFFFFF50")
text(x = 1200000, y = 6400000, "Covid-19", cex = 7.7, pos = 4, font = 2, col="#FFFFFF50", srt=90)
text(x = 70000, y = 6050000, sources, cex = 0.8, pos = 4, font = 3, col = "#30303080")
text(x = 70000, y = 6150000, total, cex = 6, pos = 4, font = 2, col="#c9383880")
text(x = 70000, y = 7120000, "PERSONNES HÔSPITALISÉES EN RAISON DE LA COVID-19", cex = 1.5, pos = 4, font = 2, col = "#30303090")
text(x = 1285000, y = 7120000, toupper(datelabel), cex = 1.5, pos = 2, font = 2, col = "#c9383890")
text(x = 1285000, y = 7100000, lbl, cex = 0.7, pos = 2, font = 2, col = "#c9383890")
text(x = 70000, y = 6230000, "NOMBRE DE PERSONNES", cex = 0.7, pos = 4, font = 2, col = "#c9383890")
#text(x = 90000, y = 7050000, toupper(datelabel), cex = 2.3, pos = 4, font = 4, col = "#30303080")
# labelLayer(x = top15, txt = "name", col= "#c93838", cex = 0.7, font = 2,
#            halo = TRUE,  bg = "#e0d580", r=0.15, overlap = FALSE, show.lines = FALSE)
if (dim(top50)[1] > 0){
labelLayer(x = top50, txt = "name", col= "#c93838", cex = 0.7, font = 2,
halo = TRUE,  bg = "#e0d580", r=0.15, overlap = FALSE, show.lines = FALSE)
}
dev.off()
}
}
